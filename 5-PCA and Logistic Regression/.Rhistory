head(traning$V17)
head(traning$v17)
head(training$v17)
head(training$V17)
training$V17as.factor(training$v17)
training$V17<-as.factor(training$v17)
training<data.frame(training, class=v17)
training<data.frame(training, class=training$v17)
training<data.frame(training, class=training$v17, stringAsFactors = F)
library("knitr", lib.loc="~/R/win-library/3.1")
install.packages("pandoc_to")
library(rmarkdown)
render("test.rmd", "all")
?plot
#reading data
data<-read.csv("winequality-red.csv", sep=";")
#Treating data names to look preety in our charts/analysis
data_names<-names(data)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
data_names<-as.vector(sapply(data_names, gsub, pattern="[.]", replacement = " "))
data_names<-as.vector(sapply(data_names, simpleCap))
plo(data, type="l")
plot(data, type="l")
plot(data, type="p")
plot(data)
plot(data, pch = 1)
plot(data, pch = 26)
data<-read.csv("winequality-red.csv", sep=";")
#Treating data names to look preety in our charts/analysis
data_names<-names(data)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
data_names<-as.vector(sapply(data_names, gsub, pattern="[.]", replacement = " "))
data_names<-as.vector(sapply(data_names, simpleCap))
#####################
num_variables = length(data)-1
setwd("~/GitHub/Advanced_Methods/assigment 3")
data<-read.csv("winequality-red.csv", sep=";")
#Treating data names to look preety in our charts/analysis
data_names<-names(data)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
data_names<-as.vector(sapply(data_names, gsub, pattern="[.]", replacement = " "))
data_names<-as.vector(sapply(data_names, simpleCap))
pca <- prcomp(data[,1:11])
plot(pca, type ="l", main = "Principal Component Analysis")
summary_pca<-summary(pca)
pca$x
t<-pca$x
t[,1]
plot(t[,1], t[,2])
?plot
t2<-cbind(t[,1], t[,2])
rownames(t2)<-data$quality
t2
t2<-cbind(t[,1], t[,2], data$quality)
t2
library(lattice)
library(directlabels)
install.packages("directlabels")
library(directlabels)
direct.label(xyplot(jitter(Sepal.Length)~jitter(Petal.Length),iris,groups=Species))
direct.label(xyplot(jitter(t2[,1])~jitter(t2[,2]),groups=t2[,3]))
direct.label(xyplot(jitter(t2[,2])~jitter(t2[,1]),groups=t2[,3]))
iris
?direct.label
direct.label(xyplot(t2[,2]~t2[,1]),groups=t2[,3]))
direct.label(xyplot(t2[,2]~t2[,1],groups=t2[,3]))
direct.label(xyplot(t2[,2]~t2[,1],groups=t2[,3], ylab="Comp 2"))
direct.label(xyplot(t2[,2]~t2[,1],groups=t2[,3], ylab="Component 2", xlab = "Component 1", main = "Plot of the first 2 Principal Component"))
t2<-cbind(pca$x[,1], pca$x[,3], data$quality)
direct.label(xyplot(t2[,2]~t2[,1],groups=t2[,3], ylab="Component 2", xlab = "Component 1", main = "Plot of the first 2 Principal Component"))
data_2<-data
data_2[,12]
data_2[,12]<-as.factor(data_2[,12])
formula_text <- paste(names(data_2[12]),"~",
paste(names(data[1:11]), collapse="+")
)
formula <- as.formula(formula_text)
fit <- glm(formula,data=data_2,family=binomial())
summary(fit)
data_2<-data
data_2[,12]<-as.factor(data_2[,12])
formula_text <- paste(names(data_2[12]),"~",paste(names(data[1:11]), collapse="+"))
fit <- glm(formula,data=data_2,family=binomial())
summary(fit)
library("RWeka")
library("ROCR")
library("caret")
install.packages("caret")
library("caret")
install.packages("ROCR")
library("ROCR")
library("e1071")
install.packages("e1071")
library("e1071")
diabetes <- read.arff(system.file("arff", "diabetes.arff",
package = "RWeka"))
formula_text <- paste(names(diabetes[9]),"~",
paste(names(diabetes[1:8]), collapse="+")
)
formula <- as.formula(formula_text)
formula
diabetes$class <- as.integer(diabetes$class) - 1
fit <- glm(formula,data=diabetes,family=binomial())
summary(fit)
diabetes$class
ata_2[,12]
data_2[,12]
formula_text <- paste(names(mtcars)[9] ,"~",
paste(names(mtcars[c(4,1,10,11)]), collapse="+")
)
formula <- as.formula(formula_text)
formula
names(mtcars)[9]
formula_text <- paste(names(data_2[12]),"~",paste(names(data[1:11]), collapse="+"))
formula_text
fit <- glm(formula,data=data_2,family=binomial())
fit <- glm(formula_text,data=data_2,family=binomial())
as.factor
?as.factor
data_2<-data
#data_2[,12]<-as.factor(data_2[,12])
formula_text <- paste(names(data_2[12]),"~",paste(names(data[1:11]), collapse="+"))
fit <- glm(formula,data=data_2,family=binomial())
data_2<-data
#data_2[,12]<-as.factor(data_2[,12])
formula_text <- paste(names(data_2[12]),"~",paste(names(data[1:11]), collapse="+"))
fit <- glm(formula_text,data=data_2,family=binomial())
data_2<-data
data_2[,12]<-as.factor(data_2[,12])
formula_text <- paste(names(data_2[12]),"~",paste(names(data[1:11]), collapse="+"))
fit <- glm(formula_text,data=data_2,family=binomial())
data_2[,12]
mtcars2 <- mtcars
mtcars2[, "am"] <- as.factor(mtcars2[, "am"])
weka_fit <- Logistic(formula,
data = mtcars2)
evaluate_Weka_classifier(weka_fit, numFolds = 10)
data_pca<-pca$x
pca$x
data_pca<-pca$x[,:3]
data_pca<-pca$x[1:3]
data_pca<-pca$x[1:3]
data_pca<-cbind(data_pca, data$quality[,12])
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
fit <- glm(formula_text,data=data_pca,family=binomial())
summary(fit)
data_pca<-cbind(pca$x[1:3], data$quality[,12])
data_pca<-cbind(pca$x[1], data$quality[,12])
length(pca$x[1])
length(pca$x[,1])
data_pca<-cbind(pca$x[,1:3], data$quality[,12])
data_pca<-cbind(pca$x[,1], data$quality[,12])
length(data$quality[,12])
length(data$quality)
data_pca<-cbind(pca$x[,1:3], data$quality)
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
fit <- glm(formula_text,data=data_pca,family=binomial())
summary(fit)
formula_text
data_pca<-cbind(pca$x[,1:3], data$quality)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
fit <- glm(formula_text,data=data_pca,family=binomial())
summary(fit)
data_pca<-cbind(pca$x[,1:3], data$quality)
data_pca<-as.factor(data_pca)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
formula_text
fit <- glm(formula_text,data=data_pca,family=binomial())
names(datapca)
names(data_pca)
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-as.factor(data_pca)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
names(data_pca)
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
head(data_pca)
colnames(data_pca)<-c("comp1", "comp2", "comp3", "quality")
head(data_pca)
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-as.factor(data_pca)
colnames(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
fit <- glm(formula_text,data=data_pca,family=binomial())
summary(fit)
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
formula_text
formula_text <- paste(names(data_pca[,4]),"~",paste(names(data_pca[,1:3]), collapse="+"))
colnames(data_pca)<-c("comp1", "comp2", "comp3", "quality")
data_pca
pca$x[,1]
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-as.factor(data_pca[,4])
colnames(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[,4]),"~",paste(names(data_pca[,1:3]), collapse="+"))
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca[,4]<-as.factor(data_pca[,4])
colnames(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[,4]),"~",paste(names(data_pca[,1:3]), collapse="+"))
formula_text
names(data_pca)
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca[,4]<-as.factor(data_pca[,4])
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
names(data_pca)
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
names(pca)
names(data_pca)
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-data.frame(data_pca)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
data_pca
data_pca[,4]<-as.factor(data_pca[,4])
data_pca
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-data.frame(data_pca)
data_pca[,4]<-as.factor(data_pca[,4])
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[,4]),"~",paste(names(data_pca[,1:3]), collapse="+"))
fit <- glm(formula_text,data=data_pca,family=binomial())
summary(fit)
formula_text
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-data.frame(data_pca)
data_pca[,4]<-as.factor(data_pca[,4])
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
names(data_pca)
formula_text <- paste(names(data_pca[,4]),"~",paste(names(data_pca[,1:3]), collapse="+"))
formula_text
names(data_pca[,4])
length(data_pca)
names(data_pca[,3])
data_pca[,4]
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
data_pca[,4]
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-data.frame(data_pca)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
data_pca[,4]<-as.factor(data_pca[,4])
names(data_pca)
formula_text <- paste(names(data_pca[,4]),"~",paste(names(data_pca[,1:3]), collapse="+"))
formula_text
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-data.frame(data_pca)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
formula_text <- paste(names(data_pca[,4]),"~",paste(names(data_pca[,1:3]), collapse="+"))
formula_text
names(data_pca)
names(data_pca[,1])
names(data_pca[1])
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-data.frame(data_pca)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
#data_pca[,4]<-as.factor(data_pca[,4])
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
formula_text
data_pca<-cbind(pca$x[,1], pca$x[,2], pca$x[,3], data$quality)
data_pca<-data.frame(data_pca)
names(data_pca)<-c("comp1", "comp2", "comp3", "quality")
data_pca[,4]<-as.factor(data_pca[,4])
formula_text <- paste(names(data_pca[4]),"~",paste(names(data_pca[1:3]), collapse="+"))
fit <- glm(formula_text,data=data_pca,family=binomial())
summary(fit)
rn_train <- sample(nrow(data),
floor(nrow(data)*0.7))
train <- data[rn_train,]
test <- data[-rn_train,]
fit <- lm(formula, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-prediction(test$scores, test$am)
c <- confusionMatrix(as.integer(test$scores > 0.5),
test$am)
c$table
rn_train
rn_train <- sample(nrow(data),
floor(nrow(data)*0.7))
train <- data[rn_train,]
test <- data[-rn_train,]
fit <- lm(formula, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-prediction(test$scores, test$am)
c <- confusionMatrix(as.integer(test$scores > 0.5),
test$quality)
c$table
formula_text <- paste(names(data_2[12]),"~",paste(names(data[1:11]), collapse="+"))
formula_raw <- as.formula(formula_text)
rn_train <- sample(nrow(data),
floor(nrow(data)*0.7))
train <- data[rn_train,]
test <- data[-rn_train,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-prediction(test$scores, test$am)
c <- confusionMatrix(as.integer(test$scores > 0.5),
test$quality)
pred<-prediction(test$scores, test$quality)
test$scores
pred<-prediction(test$scores, test$am)
pred<-prediction(test$scores, test$quality)
names(test)
c <- confusionMatrix(as.integer(test$scores > 0.5),
test$quality)
as.integer(test$scores > 0.5)
c <- confusionMatrix(round(test$scores),
test$quality)
round(test$scores)
test$quality
c <- confusionMatrix(round(test$scores),
test$quality)
?prediction
test$scores-test$quality
(round(test$scores)-test$quality)/test$quality
pred<-abs((round(test$scores)-test$quality)/test$quality)
table(pred)
table(pred, freq=T)
?table
rn_train <- sample(nrow(data),
floor(nrow(data)*0.7))
train <- data[rn_train,]
test <- data[-rn_train,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
round(pred,2)
table(round(pred,2))
c <- confusionMatrix(round(test$scores),
test$quality)
table(round(test$scores))
table(test$quality)
table(test$scores)
c <- confusionMatrix(round(test$scores),
test$quality)
length(round(test$scores))
length(test$quality)
c <- table(round(test$scores),
test$quality)
c
rbind(c, c(0,0,0,0,0,0))
rbind(c, c(0,0,0,0,0,0), rowname = "t")
rbind(c, c(0,0,0,0,0,0), 8)
rbind(c, 8=c(0,0,0,0,0,0))
rbind(c, c(0,0,0,0,0,0))
test<-rbind(c, c(0,0,0,0,0,0))
test
rowname(test[,5])<-8
rownames(test[,5])<-8
rownames(test[,5])<-"8"
rownames(test[,5])<-c("8")
?table
c <- table(round(test$scores),
test$quality, row.names = c(3,4,5,6,7,8))
c <- table(round(test$scores),
test$quality, useNA = "always")
c <- table(round(test$scores),
test$quality, useNA = "ifany")
c <- table(round(test$scores),
test$quality)
c <- table(round(test$scores), test$quality)
table(round(test$scores),
test$quality, useNA = "ifany")
pred_table<-table(round(pred,2))
c <- table(round(test$scores), test$quality)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
c <- table(round(test$scores), test$quality)
test
rn_train <- sample(nrow(data),
floor(nrow(data)*0.7))
train <- data[rn_train,]
test <- data[-rn_train,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
c <- table(round(test$scores), test$quality)
c <- table(round(test$scores), test$quality, usaNA="always")
c <- table(round(test$scores), test$quality, usaNA="ifany")
c <- table(round(test$scores), test$quality, useNA="always")
c
c <- table(round(test$scores), test$quality, row.names = c(3,4,5,6,7,8))
c <- table(round(test$scores), test$quality, dnn = c(3,4,5,6,7,8))
c <- table(round(test$scores), test$quality, disparse.level=0)
c <- table(factor(round(test$scores),levels=3:8), test$quality, disparse.level=0)
c <- table(factor(round(test$scores),levels=3:8), test$quality)
c
for (f in folds){
train <- data[-f,]
test <- data[f,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
table(factor(round(test$scores),levels=3:8), test$quality)
}
folds <- createFolds(data$quality)
for (f in folds){
train <- data[-f,]
test <- data[f,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
table(factor(round(test$scores),levels=3:8), test$quality)
}
for (f in folds){
train <- data[-f,]
test <- data[f,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
pred_table
table(factor(round(test$scores),levels=3:8), test$quality)
}
for (f in folds){
train <- data[-f,]
test <- data[f,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
print(pred_table)
table(factor(round(test$scores),levels=3:8), test$quality)
}
for (f in folds){
train <- data[-f,]
test <- data[f,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
print(paste("Validation ", f))
print(pred_table)
table(factor(round(test$scores),levels=3:8), test$quality)
}
i=1
for (f in folds){
train <- data[-f,]
test <- data[f,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
print(paste("Validation ", i))
print(pred_table)
table(factor(round(test$scores),levels=3:8), test$quality)
i=i+1
}
for (f in folds){
train <- data[-f,]
test <- data[f,]
fit <- lm(formula_raw, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-abs((round(test$scores)-test$quality)/test$quality)
pred_table<-table(round(pred,2))
print(paste("Prediction Table for validation", i))
print(pred_table)
c<-table(factor(round(test$scores),levels=3:8), test$quality)
print(paste("Confusion Matrix for validation", i))
i=i+1
}
?creatFolds
?createFolds
?knitr::pic
?knitr::fig
library("knitr", lib.loc="~/R/win-library/3.1")
?knitr::fig
?knitr::pic
?knitr::opts_chunk
test$scores
test$quality
if((test$scores-test$quality)/test$quality<=0.95){predict<-test$score}
?if()
?if{}
?if
(){}
if((test$scores-test$quality)/test$quality<=0.95)
predict<-test$score
if((test$scores-test$quality)/test$quality<=0.95)
test_predict<-test$score
names(data)
